@page "/update-customer"
@using VillageRentals.CSFiles
@inject JsonService JsonService
@inject NavigationManager NavigationManager

<h3>Update Customer</h3>

<div class="form-group">
    <label>Customer:</label>
    <select class="form-control" @bind="SelectedCustomerID" @bind:after="OnCustomerChanged">
        <option value="0">Select a customer...</option>
        @foreach (var customer in Customers)
        {
            <option value="@customer.CustomerID">@customer.CustomerID @customer.CustomerFirstName @customer.CustomerLastName</option>
        }
    </select>
</div>
<div class="form-group">
    <label>Customer Last Name:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerLastName" />
</div>
<div class="form-group">
    <label>Customer First Name:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerFirstName" />
</div>
<div class="form-group">
    <label>Customer Phone Number:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerContactPhone" />
</div>
<div class="form-group">
    <label>Customer Email:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerEmail" />
</div>
<div class="form-group">
    <label>Customer is banned:</label>
    <select class="form-control" value="@(Customer.CustomerIsBanned ? "Y" : "N")" disabled>
        <option value="Y">Y</option>
        <option value="N">N</option>
    </select>
</div>
<div class="form-group">
    <label>Customer banned description:</label>
    <textarea class="form-control" value="@(Customer.CustomerBannedDescription ?? "")" readonly rows="3"></textarea>
</div>
<div class="form-group">
    <label>Customer Discount: (%)</label>
    <input type="number" class="form-control" @bind="Customer.CustomerDiscount" step="1" />
</div>
<div class="button-group">
    <button class="btn btn-primary" @onclick="UpdateSelectedCustomer">Update</button>
    <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="@MessageClass">@Message</p>
}

@code {
    private List<Customer> Customers = new List<Customer>();
    private int SelectedCustomerID { get; set; }
    private CustomerManagementUI Customer { get; set; } = new CustomerManagementUI();
    private string Message = string.Empty;
    private string MessageClass = string.Empty;

    protected override void OnInitialized()
    {
        // Load all customers
        Customers = DataStore.Customers;
    }

    private void OnCustomerChanged()
    {
        if (SelectedCustomerID != 0)
        {
            var selectedCustomer = DataStore.Customers.FirstOrDefault(c => c.CustomerID == SelectedCustomerID);
            if (selectedCustomer != null)
            {
                Customer = new CustomerManagementUI(
                    selectedCustomer.CustomerID,
                    selectedCustomer.CustomerLastName,
                    selectedCustomer.CustomerFirstName,
                    selectedCustomer.CustomerContactPhone,
                    selectedCustomer.CustomerEmail,
                    selectedCustomer.CustomerIsBanned,
                    selectedCustomer.CustomerBannedDescription,
                    selectedCustomer.CustomerDiscount,
                    selectedCustomer.CustomerPassword
                );
            }
        }
        else
        {
            Customer = new CustomerManagementUI();
        }
    }

    private void UpdateSelectedCustomer()
    {
        if (SelectedCustomerID == 0)
        {
            Message = "Please select a customer to update.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerLastName))
        {
            Message = "Please enter the customer's last name.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerFirstName))
        {
            Message = "Please enter the customer's first name.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerContactPhone))
        {
            Message = "Please enter the customer's phone number.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerEmail))
        {
            Message = "Please enter the customer's email.";
            MessageClass = "error-message";
            return;
        }

        if (Customer.CustomerDiscount < 0 || Customer.CustomerDiscount > 100)
        {
            Message = "Customer discount must be between 0 and 100.";
            MessageClass = "error-message";
            return;
        }

        // Update the customer
        var updatedCustomer = new Customer(
            Customer.CustomerID,
            Customer.CustomerLastName,
            Customer.CustomerFirstName,
            Customer.CustomerContactPhone,
            Customer.CustomerEmail,
            Customer.CustomerIsBanned,
            Customer.CustomerBannedDescription,
            Customer.CustomerDiscount,
            Customer.CustomerPassword
        );
        JsonService.AddCustomer(updatedCustomer);

        // Refresh the customers list
        Customers = DataStore.Customers;

        // Clear the selection
        SelectedCustomerID = 0;
        Customer = new CustomerManagementUI();

        // Show success message
        Message = "Customer updated successfully!";
        MessageClass = "success-message";
    }

    private void Cancel()
    {
        // Clear the selection
        SelectedCustomerID = 0;
        Customer = new CustomerManagementUI();
        Message = string.Empty;
    }
}

<style>
    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 300px;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .button-group {
        display: flex;
        gap: 1rem;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .success-message {
        color: green;
        margin-top: 1rem;
    }

    .error-message {
        color: red;
        margin-top: 1rem;
    }
</style>