@page "/add-customer"
@using VillageRentals.CSFiles
@inject JsonService JsonService
@inject NavigationManager NavigationManager

<h3>Add Customer</h3>

<div class="form-group">
    <label>Customer ID:</label>
    <input type="text" class="form-control" value="@Customer.CustomerID" readonly />
</div>
<div class="form-group">
    <label>Customer Last Name:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerLastName" />
</div>
<div class="form-group">
    <label>Customer First Name:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerFirstName" />
</div>
<div class="form-group">
    <label>Customer Phone Number:</label>
    <input type="text" class="form-control" @bind="Customer.CustomerContactPhone" @oninput="FormatPhoneNumber" placeholder="Enter 10-digit phone number" />
</div>
<div class="form-group">
    <label>Customer Email:</label>
    <input type="email" class="form-control" @bind="Customer.CustomerEmail" placeholder="example@domain.com" />
</div>
<div class="form-group">
    <label>Customer is banned:</label>
    <select class="form-control" value="@(Customer.CustomerIsBanned ? "Y" : "N")" disabled>
        <option value="Y">Y</option>
        <option value="N">N</option>
    </select>
</div>
<div class="form-group">
    <label>Customer banned description:</label>
    <textarea class="form-control" value="@Customer.CustomerBannedDescription" readonly rows="3"></textarea>
</div>
<div class="form-group">
    <label>Customer Discount: (%)</label>
    <input type="number" class="form-control" @bind="Customer.CustomerDiscount" min="0" max="100" />
</div>
<div class="form-group">
    <label>Customer Password:</label>
    <input type="text" class="form-control" value="@Customer.CustomerPassword" readonly />
</div>
<div class="button-group">
    <button class="btn btn-primary" @onclick="SaveCustomer">Save</button>
    <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="@MessageClass">@Message</p>
}

@code {
    private CustomerManagementUI Customer = new CustomerManagementUI();
    private string Message = string.Empty;
    private string MessageClass = string.Empty;

    protected override void OnInitialized()
    {
        // Set the next available Customer ID
        Customer.CustomerID = JsonService.GetNextCustomerID();
    }

	private void FormatPhoneNumber(ChangeEventArgs e) // When the input changes and the formatting is correct
    {
        string input = e.Value?.ToString()?.Replace("(", "").Replace(")", "").Replace(" ", "").Replace("-", "");
        if (string.IsNullOrEmpty(input) || input.Length != 10 || !input.All(char.IsDigit))
        {
            Customer.CustomerContactPhone = input ?? "";
            return;
        }

        Customer.CustomerContactPhone = $"({input.Substring(0, 3)}) {input.Substring(3, 3)}-{input.Substring(6, 4)}";
    }

    private void SaveCustomer()
    {
        if (string.IsNullOrWhiteSpace(Customer.CustomerLastName))
        {
            Message = "Please enter the customer's last name.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerFirstName))
        {
            Message = "Please enter the customer's first name.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerContactPhone) || Customer.CustomerContactPhone.Length != 14)
        {
            Message = "Please enter a valid 10-digit phone number.";
            MessageClass = "error-message";
            return;
        }

        if (string.IsNullOrWhiteSpace(Customer.CustomerEmail) || !IsValidEmail(Customer.CustomerEmail))
        {
            Message = "Please enter a valid email address.";
            MessageClass = "error-message";
            return;
        }

        if (Customer.CustomerDiscount < 0 || Customer.CustomerDiscount > 100)
        {
            Message = "Customer discount must be between 0 and 100.";
            MessageClass = "error-message";
            return;
        }

        // Save to JSON
        var newCustomer = new Customer(
            Customer.CustomerID,
            Customer.CustomerLastName,
            Customer.CustomerFirstName,
            Customer.CustomerContactPhone,
            Customer.CustomerEmail,
            Customer.CustomerIsBanned,
            Customer.CustomerBannedDescription,
            Customer.CustomerDiscount,
            Customer.CustomerPassword
        );
        JsonService.AddCustomer(newCustomer);

        // Show success message
        Message = "Customer added successfully!";
        MessageClass = "success-message";

        // Reset the form for the next entry
        Customer = new CustomerManagementUI();
        Customer.CustomerID = JsonService.GetNextCustomerID();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private void Cancel()
    {
        // Reset the form
        Customer = new CustomerManagementUI();
        Customer.CustomerID = JsonService.GetNextCustomerID();
        Message = string.Empty;
    }
}

<style>
    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        width: 300px;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .button-group {
        display: flex;
        gap: 1rem;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .success-message {
        color: green;
        margin-top: 1rem;
    }

    .error-message {
        color: red;
        margin-top: 1rem;
    }
</style>